{
  "ver": "1.0.25",
  "uuid": "4014a967-debd-4e15-83c3-6d6db09af0ef",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\n  precision highp float;\nuniform mediump mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n  attribute vec3 a_position;\n  attribute vec4 a_color;\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  attribute vec2 a_uv0;\n  varying vec2 v_uv0;\n  #endif\n  uniform float time;\nvec4 CalculateRotation(vec4 pos)\n      {\n          float rotation= 30.3 * time;\n          float s = sin(radians(rotation));\n          float c = cos(radians(rotation));\n          mat2 rotMatrix = mat2(c,-s,s,c);\n          pos.xy = pos.xy * rotMatrix;\n          return pos;\n      }\n void main () {\n    vec4 pos = vec4(a_position, 1);\n    #if CC_USE_MODEL\n    pos = cc_matViewProj * cc_matWorld * pos;\n    #else\n    pos = cc_matViewProj * pos;\n    #endif\n    #if USE_TEXTURE\n    v_uv0 = a_uv0;\n    #endif\n    v_color = a_color;\n    gl_Position = CalculateRotation(pos);\n  }",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\n  precision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n  in vec3 a_position;\n  in vec4 a_color;\n  out vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 a_uv0;\n  out vec2 v_uv0;\n  #endif\n  uniform TR {\n    float time;\n  };\nvec4 CalculateRotation(vec4 pos)\n      {\n          float rotation= 30.3 * time;\n          float s = sin(radians(rotation));\n          float c = cos(radians(rotation));\n          mat2 rotMatrix = mat2(c,-s,s,c);\n          pos.xy = pos.xy * rotMatrix;\n          return pos;\n      }\n void main () {\n    vec4 pos = vec4(a_position, 1);\n    #if CC_USE_MODEL\n    pos = cc_matViewProj * cc_matWorld * pos;\n    #else\n    pos = cc_matViewProj * pos;\n    #endif\n    #if USE_TEXTURE\n    v_uv0 = a_uv0;\n    #endif\n    v_color = a_color;\n    gl_Position = CalculateRotation(pos);\n  }",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}